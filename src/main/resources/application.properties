app.version=@project.version@
app.homepage=https://identifiers.org
spring.application.name=cloud-ws-link-checker
server.port=8084
# Redis configuration
spring.redis.host=${WS_LINK_CHECKER_CONFIG_REDIS_HOST:localhost}
spring.redis.port=${WS_LINK_CHECKER_CONFIG_REDIS_PORT:6379}
# Redis backend
org.identifiers.cloud.ws.linkchecker.backend.data.queue.key.linkcheckrequests=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_QUEUE_KEY_LINK_CHECK_REQUESTS:linkCheckerLinkCheckRequestsQueue}
org.identifiers.cloud.ws.linkchecker.backend.data.channel.key.linkcheckresults=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_CHANNEL_KEY_LINK_CHECK_RESULTS:linkCheckerChannelLinkCheckResults}
org.identifiers.cloud.ws.linkchecker.backend.data.channel.key.flushhistorytrackingdata=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_CHANNEL_KEY_FLUSH_HISTORY_TRACKING_DATA:linkCheckerChannelFlushHistoryTrackingData}
# Stats cache configuration
org.identifiers.cloud.ws.linkchecker.backend.data.cache.expiry=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_CACHE_EXPIRY:365d}
org.identifiers.cloud.ws.linkchecker.backend.data.cache.size=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_CACHE_SIZE:1500}
# Identifiers.org API configuration
org.identifiers.cloud.ws.linkchecker.backend.service.resolver.host=${WS_LINK_CHECKER_CONFIG_BACKEND_SERVICE_RESOLVER_HOST:localhost}
org.identifiers.cloud.ws.linkchecker.backend.service.resolver.port=${WS_LINK_CHECKER_CONFIG_BACKEND_SERVICE_RESOLVER_PORT:8080}
# Periodic link checker configuration
org.identifiers.cloud.ws.linkchecker.daemon.websiteswithtrustedcerts=${WS_LINK_CHECKER_CONFIG_DAEMON_WEBSITES_WITH_TRUSTED_CERTS:}
org.identifiers.cloud.ws.linkchecker.daemon.periodiclinkcheckingtask.enabled=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECKING_ENABLED:true}
org.identifiers.cloud.ws.linkchecker.daemon.periodiclinkcheckingtask.strategy=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECKING_STRATEGY:multi-user-agent}
org.identifiers.cloud.ws.linkchecker.daemon.periodicchecksfeedertask.enabled=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECK_REQUESTER_ENABLED:true}
org.identifiers.cloud.ws.linkchecker.daemon.periodicchecksfeedertask.waittime.max=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECK_REQUESTER_WAITIME_MAX:24h}
org.identifiers.cloud.ws.linkchecker.daemon.periodicchecksfeedertask.waittime.min=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECK_REQUESTER_WAITIME_MIN:12h}
org.identifiers.cloud.ws.linkchecker.daemon.periodicchecksfeedertask.waittime.error=${WS_LINK_CHECKER_CONFIG_DAEMON_PERIODIC_LINK_CHECK_REQUESTER_WAITIME_ERROR:1h}
org.identifiers.cloud.ws.linkchecker.daemon.linkchecker.waittime.min=${WS_LINK_CHECKER_CONFIG_DAEMON_LINK_CHECKER_MIN_WAITTIME:1m}
org.identifiers.cloud.ws.linkchecker.daemon.linkchecker.waittime.max=${WS_LINK_CHECKER_CONFIG_DAEMON_LINK_CHECKER_WAITTIME_LIMIT:2m}
org.identifiers.cloud.ws.linkchecker.daemon.linkchecker.waittime.polltimeout=${WS_LINK_CHECKER_CONFIG_DAEMON_LINK_CHECKER_POLL_TIMEOUT:3s}
org.identifiers.cloud.ws.linkchecker.daemon.linkchecker.nthreads=${WS_LINK_CHECKER_CONFIG_DAEMON_LINK_CHECKER_NTHREADS:5}

# Link Check Results Time To Live (default = 7 days)
org.identifiers.cloud.ws.linkchecker.backend.data.linkcheckresults.ttl=${WS_LINK_CHECKER_CONFIG_BACKEND_DATA_LINK_CHECK_RESULTS_TTL:7d}


org.identifiers.cloud.ws.linkchecker.requiredrole=${WS_LINK_CHECKER_CONFIG_BACKEND_REQUIRED_ROLE:chad}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${WS_LINK_CHECKER_CONFIG_BACKEND_SERVICE_JWT_ISSUERURI:}

### Spring actuators
management.endpoints.enabled-by-default=false
management.endpoints.jmx.exposure.exclude=*
management.endpoints.web.exposure.include=loggers,health

management.endpoint.loggers.enabled=true

management.endpoint.health.enabled=true
management.endpoint.health.show-details=when_authorized
management.endpoint.health.redis.enabled=true
management.endpoint.health.diskspace.enabled=false
management.endpoint.health.periodic-checker-thread.enabled=true
management.endpoint.health.link-checker-thread.enabled=true

