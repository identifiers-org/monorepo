spring.application.name=cloud-hq-ws-registry
server.port=8180
# Data source (for this iteration we'll be using a PostgreSQL backend)
spring.datasource.url=${HQ_WS_REGISTRY_CONFIG_JDBC_URL:jdbc:postgresql://127.0.0.1:5432/devdatabase}
spring.datasource.username=${HQ_WS_REGISTRY_CONFIG_RDBMS_USERNAME:devusername}
spring.datasource.password=${HQ_WS_REGISTRY_CONFIG_RDBMS_PASSWORD:devpassword}
spring.jpa.hibernate.ddl-auto=update
# There is a problem with Atomikos trying to autodetect the features of our PostgreSQL, that makes the application
# crash, so we need to use this shady undocumented way of working around it
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
spring.data.rest.base-path=restApi
# MIR ID Controller Configuration
org.identifiers.cloud.hq.ws.registry.backend.service.miridcontroller.host=${HQ_WS_REGISTRY_CONFIG_BACKEND_SERVICE_MIRID_CONTROLLER_HOST:localhost}
org.identifiers.cloud.hq.ws.registry.backend.service.miridcontroller.port=${HQ_WS_REGISTRY_CONFIG_BACKEND_SERVICE_MIRID_CONTROLLER_PORT:8084}
# MongoDB Backend Configuration (default value is development environment)
#spring.data.mongodb.host=${HQ_WS_REGISTRY_CONFIG_MONGODB_HOST:localhost}
#spring.data.mongodb.port=${HQ_WS_REGISTRY_CONFIG_MONGODB_PORT:27017}
#spring.data.mongodb.database=${HQ_WS_REGISTRY_CONFIG_MONGODB_DATABASE:devdbregistry}
#spring.data.mongodb.username=${HQ_WS_REGISTRY_CONFIG_MONGODB_USERNAME:devusername}
#spring.data.mongodb.password=${HQ_WS_REGISTRY_CONFIG_MONGODB_PASSWORD:devpassword}