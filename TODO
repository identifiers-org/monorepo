- Interfaz del link checker
    - Get the score for a plain URL
    - Get the score for a CID, given a resolved resource
    - Get the score for home URL, given as a resolved resource

--- NEW PLANS ---
- Ok, so my plans on using a few redis hashes via spring data redis are wrong.
    - Create a LinkCheckRequest that contains all the information present in a resolved resource, it needs to say whether a plain URL, a resolution or a provider is being requested.
    - Refactor CheckedUrl to LinkCheckResult, it doesn't need to contain anything else than the ID of either the resource (for a resolution URL check), the provider (for a home URL check) or none of them, for just a plain URL check.
        - It will be stored in a redis hash ('linkCheckerLinkCheckResult'), and indexed by several fields, e.g. url, resource id, provider id, timestamp, etc.
    - Create a redis hash for a provider (home url tracking)
    - Create a redis hash for a resource (cid resolution, a.k.a. resolved resource, tracking)
    - Create a redis hash for tracking of plain URLs

[Requesting Scoring on tracked entity]
- Workflow when requesting scoring on a link (url, provider or resource):
    If (no stats cache exits for the given link checking request)
        if (no entry exists in its corresponding redis hash (url, provider or resource))
            Create tracking entry
        else
            Populate local cached stats
        Queue link checking request
    return cached stats

[Link Checking worker]
- Pull link checking request
- Perform check
- Add check results to the LinkCheckResult hash
- Announce the LinkCheckResult

[Local Cached Stats Updater]
- Upon announcement of a LinkCheckResult
    if (in local cache)
        update(linkCheckResult)

[NOTES on LinkCheckRequest]
- I may use a Redis Sorted Set where the timestamp of the link checking request is the score, this will allow me to pop form the sorted set the oldest requests.
- WARNING - It would be nice to have a way of grouping by, for example, domain name, so a link checking worker can checkout all the requests for a given domain, and then politely check them to avoid being banned by that domain.
